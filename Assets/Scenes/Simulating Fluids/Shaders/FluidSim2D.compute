#pragma kernel kernel_calc_density
#pragma kernel kernel_apply_force
#pragma kernel kernel_update_position

RWStructuredBuffer<float2> u_positions;
RWStructuredBuffer<float2> u_velocities;
RWStructuredBuffer<float> u_densities;

const uint u_num_particles;
float u_gravity;
float u_delta_time;
float2 u_bounds_size;
float u_collision_damping;
float u_smoothing_radius;
float u_target_density;
float u_pressure_multiplier;

static const int s_num_threads = 64;

void handle_collisions(const uint v_particle_idx)
{
    float2 position = u_positions[v_particle_idx];
    float2 velocity = u_velocities[v_particle_idx];

    const float2 half_size = u_bounds_size * 0.5;
    float2 edge_distance = half_size - abs(position);

    if (edge_distance.x <= 0)
    {
        position.x = half_size.x * sign(position.x);
        velocity.x *= -1 * u_collision_damping;
    }
    if (edge_distance.y <= 0)
    {
        position.y = half_size.y * sign(position.y);
        velocity.y *= -1 * u_collision_damping;
    }

    u_positions[v_particle_idx] = position;
    u_velocities[v_particle_idx] = velocity;
}

float calc_influence(const float v_radius, const float v_distance)
{
    if (v_distance < v_radius)
    {
        const float factor = 1.0;
        const float value = v_radius - v_distance;
        return value * value * value * factor;
    }
    return 0;
}

float calc_influence_derivative(const float v_radius, const float v_distance)
{
    if (v_distance <= v_radius)
    {
        const float factor = 1.0;
        const float value = v_radius - v_distance;
        return -value * value * factor;
    }
    return 0;
}

float calc_density(const float2 v_sample_point)
{
    float density = 0.0;

    for (int i = 0; i < u_num_particles; ++i)
    {
        const float mass = 1.0;
        const float dst = length(u_positions[i] - v_sample_point);
        const float influence = calc_influence(u_smoothing_radius, dst);
        density += mass * influence;
    }

    return density;
}

float convert_density_to_pressure(const float v_density)
{
    const float density_error = v_density - u_target_density;
    const float pressure = density_error * u_pressure_multiplier;
    return pressure;
}

float2 calc_pressure_force(const uint v_particle_index)
{
    float2 pressure_force = float2(0.0, 0.0);
    const float2 sample_point = u_positions[v_particle_index];

    for (int i = 0; i < u_num_particles; ++i)
    {
        if (i == v_particle_index) continue;
        const float mass = 1.0;
        const float2 offset = u_positions[i] - sample_point;
        const float dst = length(offset);
        const float2 dir = dst == 0 ? float2(1.0, 0.0) : offset / dst; // float2(1.0, 0.0) just a random dir
        const float slope = calc_influence_derivative(u_smoothing_radius, dst);
        const float density = u_densities[i];
        pressure_force += -convert_density_to_pressure(density) * dir * slope * mass / density;
    }

    return pressure_force;
}

[numthreads(s_num_threads,1,1)]
void kernel_calc_density(uint3 v_id : SV_DispatchThreadID)
{
    if (v_id.x >= u_num_particles) return;
    const uint particle_idx = v_id.x;

    u_densities[particle_idx] = calc_density(u_positions[particle_idx]);
}

[numthreads(s_num_threads,1,1)]
void kernel_apply_force(uint3 v_id : SV_DispatchThreadID)
{
    if (v_id.x >= u_num_particles) return;
    const uint particle_idx = v_id.x;

    // apply pressure force
    const float2 pressure_force = calc_pressure_force(particle_idx);
    u_velocities[particle_idx] += pressure_force / u_densities[particle_idx] * u_delta_time;
    // apply gravity
    u_velocities[particle_idx] += float2(0, -1) * u_gravity * u_delta_time;
}

[numthreads(s_num_threads,1,1)]
void kernel_update_position(uint3 v_id : SV_DispatchThreadID)
{
    if (v_id.x >= u_num_particles) return;
    const uint particle_idx = v_id.x;

    u_positions[particle_idx] += u_velocities[particle_idx] * u_delta_time;
    handle_collisions(particle_idx);
}